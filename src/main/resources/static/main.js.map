{"version":3,"sources":["./src/app/btc-price-stream/btc-price-stream.component.html","./src/app/btc-price-stream/btc-price-stream.component.ts","./src/environments/environment.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/configuration/socket.configuration.ts","./src/app/app-routing.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["<div id=\"label\">Latest price of {{symbol}}:&nbsp;</div>\n<div id=\"price-feed\">\n    <div *ngFor=\"let price of priceFeed\">\n        {{price}}\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { RxStompService } from '@stomp/ng2-stompjs';\nimport { Message } from '@stomp/stompjs';\n\ninterface TickerMessage {\n  price: string;\n  symbol: string;\n}\n\nconst asTickerMessage = (message: string): TickerMessage => JSON.parse(message);\n\n@Component({\n  templateUrl: './btc-price-stream.component.html',\n  styleUrls: ['./btc-price-stream.component.scss']\n})\nexport class BtcPriceStreamComponent implements OnInit {\n\n  public priceFeed: string[] = [];\n  public symbol: string = 'symbol';\n\n  constructor(private rxStompService: RxStompService) { }\n\n  ngOnInit(): void {\n    this.rxStompService.watch('/topic/price').subscribe((message: Message) => {\n      const tickerMessage = asTickerMessage(message.body);\n      this.symbol = tickerMessage.symbol;\n\n      const length = this.priceFeed.unshift(tickerMessage.price);\n      this.priceFeed = length > 20 ? this.priceFeed.slice(0, 20) : this.priceFeed;\n    });\n\n    this.rxStompService.publish({destination: '/app/ticker', body: JSON.stringify({symbol: 'btcusdt'})});\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n}\n","<div class=\"container\">\n  <router-outlet></router-outlet>\n</div>","import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { InjectableRxStompConfig, RxStompService, rxStompServiceFactory } from '@stomp/ng2-stompjs';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BtcPriceStreamComponent } from './btc-price-stream/btc-price-stream.component';\n\nimport { socketConfig, socketConfigWithDebug } from '../configuration/socket.configuration';\nimport { environment } from '../environments/environment';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    BtcPriceStreamComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    ReactiveFormsModule,\n  ],\n  providers: [\n    {\n      provide: InjectableRxStompConfig,\n      useValue: environment.production ? socketConfig : socketConfigWithDebug,\n    },\n    {\n      provide: RxStompService,\n      useFactory: rxStompServiceFactory,\n      deps: [InjectableRxStompConfig],\n    },\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { InjectableRxStompConfig } from \"@stomp/ng2-stompjs\";\n\nexport const socketConfig: InjectableRxStompConfig = {\n    // Which server?\n    brokerURL: 'ws://java-binance-api.herokuapp.com//ws',\n  \n    // How often to heartbeat?\n    // Interval in milliseconds, set to 0 to disable\n    heartbeatIncoming: 0, // Typical value 0 - disabled\n    heartbeatOutgoing: 20000, // Typical value 20000 - every 20 seconds\n  \n    // Wait in milliseconds before attempting auto reconnect\n    // Set to 0 to disable\n    // Typical value 500 (500 milli seconds)\n    reconnectDelay: 200,\n};\n\nexport const socketConfigWithDebug: InjectableRxStompConfig = {\n    // Which server?\n    brokerURL: 'ws://localhost:8080/ws',\n  \n    // How often to heartbeat?\n    // Interval in milliseconds, set to 0 to disable\n    heartbeatIncoming: 0, // Typical value 0 - disabled\n    heartbeatOutgoing: 20000, // Typical value 20000 - every 20 seconds\n  \n    // Wait in milliseconds before attempting auto reconnect\n    // Set to 0 to disable\n    // Typical value 500 (500 milli seconds)\n    reconnectDelay: 0,\n\n    // Will log diagnostics on console\n    // It can be quite verbose, not recommended in production\n    // Skip this key to stop logging to console\n    debug: (msg: string): void => {\n        console.log(new Date(), msg);\n    },\n};","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { BtcPriceStreamComponent } from './btc-price-stream/btc-price-stream.component';\n\nconst routes: Routes = [{\n  path: '',\n  component: BtcPriceStreamComponent\n}];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}